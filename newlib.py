import numpy as np
import numpy.random as rnd
from numba import njit   # used to speed up

@njit
# calculate the field of one spin sensed which is generated by its nearest neighbors
def near(L,spin,N1,N2,n):
    # Based on the lattice structure, we respectively calculate the field for different point positions in the triangular plaquatte
    if n==0:
        return spin[N1][N2][1]+spin[N1][N2][2]+spin[N1][(N2+1)%L][2]+spin[(N1-1)%L][(N2+1)%L][1]
    elif n==1:
        return spin[N1][N2][0]+spin[N1][N2][2]+spin[(N1+1)%L][(N2-1)%L][0]+spin[(N1+1)%L][N2][2]
    elif n==2:
        return spin[N1][N2][0]+spin[N1][N2][1]+spin[N1][(N2-1)%L][0]+spin[(N1-1)%L][N2][1]

@njit
# Canonical Monte Carlo function
def CanoMC(L,beta,J,spin):
    T = 1./beta
    E = 0
    
    for n1 in range(L):
        for n2 in range(L):
            for site in range(3):
                # Generate the new spin direction with random numbers x,y,z, where z∈[1−T,1], and adjust x and y to make sure the spin has a unit length
                delta =rnd.random((3,))
                z = 1-T + delta[2]*T
                x = delta[0]/np.sqrt(delta[0]**2+delta[1]**2)*np.sqrt(1-z**2)
                y = delta[1]/np.sqrt(delta[0]**2+delta[1]**2)*np.sqrt(1-z**2)
                normal = spin[n1][n2][site]
                
                # a rotation of the reference axis
                if normal[0] != 0 or normal[1] != 0:
                    tangent1 = np.array([-normal[1], normal[0], 0], dtype=np.float64)
                else:
                    tangent1 = np.array([1, 0, 0],dtype=np.float64)
                # normalize the "tangent1" vector
                tangent1 /= np.linalg.norm(tangent1)
                
                # use the cross product to determine the direction of the remaining one axis, and normalize it
                tangent2 = np.cross(normal, tangent1)
                tangent2 /= np.linalg.norm(tangent2)
                # obtain the new spin configuration generated in this function
                new_S = z*normal+x*tangent1+y*tangent2

                # calculate the energy change dE caused by the proposed spin configuration update
                dE = J*np.dot((new_S-spin[n1][n2][site]),near(L,spin,n1,n2,site))
                # determine whether to accept the spin update by using the probability exp(-beta*dE)
                if dE<0:
                    spin[n1][n2][site]=new_S
                    E += dE
                elif rnd.random()<min(1,np.exp(-beta*dE)):
                    spin[n1][n2][site]=new_S
                    E += dE
    return spin,E

def choose_random_sites(lattice, num_sites):
    L = lattice.size
    
    # select num_sites lattice sites in the whole lattice system
    selected_sites = []
    for i in range(num_sites):
        # Randomly select 'num_sites' coordinates
        x = rnd.randint(0,L)
        y = rnd.randint(0,L)
        n = rnd.randint(0,3)
        selected_sites.append([x,y,n])
    return selected_sites

def later_state(lattice,former_state):
    h = near(lattice.size,lattice.spins,former_state[0],former_state[1],former_state[2])   # to be decided by the "near" function
    Bef_flip = lattice.spins[former_state[0]][former_state[1]][former_state[2]]   # the spin before the flip
    
    # Flip the spin according to an equation
    h_2 = h[0]**2 +h[1]**2 +h[2]**2
    Si_hi = Bef_flip[0]*h[0] + Bef_flip[1]*h[1] + Bef_flip[2]*h[2]
    Fec_H = np.zeros(3)
    Fec_H = 2*(h*Si_hi/h_2)

    # Aft_flip is the new state of the spin after the operation of flipping
    Aft_flip = -Bef_flip + Fec_H
    return Aft_flip

# This is the function to combine the previous functions "choose_random_sites" and "later_state", to achieve the flip of spins for all the selected sites
def Over_relaxation(lattice,num_sites):
    L = lattice.size
    selected_sites = choose_random_sites(lattice,num_sites)
    for i in range (num_sites):
        Cho_site = selected_sites[i]
        Aft_flip = later_state(lattice,Cho_site)
        lattice.spins[Cho_site[0]][Cho_site[1]][Cho_site[2]] = Aft_flip

def hybrid_Monte_Carlo(kagome,num_sites,beta): 
    num_of_over_relax = 4
    spin , dE = CanoMC(kagome.size,beta,kagome.J,kagome.spins)
    kagome.spins = spin
    kagome.energy += dE
    for k in range(num_of_over_relax):
        Over_relaxation(kagome,num_sites)

# This is the function to measure the energy of the lattice system
def measure(kagome,num_sites,beta):  
    for a in range(5):
        hybrid_Monte_Carlo(kagome,num_sites,beta)
        # 5 intervals to generate a new grid
    return kagome.energy
